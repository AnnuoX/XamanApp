diff --git a/node_modules/react-native-camera/android/build.gradle b/node_modules/react-native-camera/android/build.gradle
index 4aed495..bf45baa 100644
--- a/node_modules/react-native-camera/android/build.gradle
+++ b/node_modules/react-native-camera/android/build.gradle
@@ -73,9 +73,6 @@ dependencies {
   implementation "androidx.exifinterface:exifinterface:1.3.2"
   implementation "androidx.annotation:annotation:1.0.0"
   implementation "androidx.legacy:legacy-support-v4:1.0.0"
-  implementation "com.google.android.gms:play-services-mlkit-text-recognition:16.3.0"
-  generalImplementation "com.google.android.gms:play-services-mlkit-barcode-scanning:16.2.0"
-  generalImplementation "com.google.android.gms:play-services-mlkit-face-detection:16.2.0"
-  mlkitImplementation "com.google.mlkit:barcode-scanning:16.2.0"
-  mlkitImplementation "com.google.mlkit:face-detection:16.1.2"
+  generalImplementation "com.google.android.gms:play-services-mlkit-barcode-scanning:18.2.0"
+  mlkitImplementation "com.google.mlkit:barcode-scanning:17.1.0"
 }
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraModule.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraModule.java
index 1ce3279..990a4d6 100644
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraModule.java
+++ b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraModule.java
@@ -5,11 +5,8 @@ import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.util.Log;
-import android.widget.Toast;
 
 import com.facebook.react.bridge.*;
-import com.facebook.react.common.build.ReactBuildConfig;
 import com.facebook.react.uimanager.NativeViewHierarchyManager;
 import com.facebook.react.uimanager.UIBlock;
 import com.facebook.react.uimanager.UIManagerModule;
@@ -17,7 +14,6 @@ import com.google.android.cameraview.AspectRatio;
 import com.google.zxing.BarcodeFormat;
 import org.reactnative.barcodedetector.BarcodeFormatUtils;
 import org.reactnative.camera.utils.ScopedContext;
-import org.reactnative.facedetector.RNFaceDetector;
 import com.google.android.cameraview.Size;
 
 import javax.annotation.Nullable;
@@ -94,40 +90,6 @@ public class CameraModule extends ReactContextBaseJavaModule {
         put("WhiteBalance", getWhiteBalanceConstants());
         put("VideoQuality", getVideoQualityConstants());
         put("BarCodeType", getBarCodeConstants());
-        put("FaceDetection", Collections.unmodifiableMap(new HashMap<String, Object>() {
-          {
-            put("Mode", getFaceDetectionModeConstants());
-            put("Landmarks", getFaceDetectionLandmarksConstants());
-            put("Classifications", getFaceDetectionClassificationsConstants());
-          }
-
-          private Map<String, Object> getFaceDetectionModeConstants() {
-            return Collections.unmodifiableMap(new HashMap<String, Object>() {
-              {
-                put("fast", RNFaceDetector.FAST_MODE);
-                put("accurate", RNFaceDetector.ACCURATE_MODE);
-              }
-            });
-          }
-
-          private Map<String, Object> getFaceDetectionClassificationsConstants() {
-            return Collections.unmodifiableMap(new HashMap<String, Object>() {
-              {
-                put("all", RNFaceDetector.ALL_CLASSIFICATIONS);
-                put("none", RNFaceDetector.NO_CLASSIFICATIONS);
-              }
-            });
-          }
-
-          private Map<String, Object> getFaceDetectionLandmarksConstants() {
-            return Collections.unmodifiableMap(new HashMap<String, Object>() {
-              {
-                put("all", RNFaceDetector.ALL_LANDMARKS);
-                put("none", RNFaceDetector.NO_LANDMARKS);
-              }
-            });
-          }
-        }));
         put("GoogleVisionBarcodeDetection", Collections.unmodifiableMap(new HashMap<String, Object>() {
           {
             put("BarcodeType", BarcodeFormatUtils.REVERSE_FORMATS);
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraViewManager.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraViewManager.java
index 9ffd467..38265f2 100644
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraViewManager.java
+++ b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/CameraViewManager.java
@@ -177,31 +177,6 @@ public class CameraViewManager extends ViewGroupManager<RNCameraView> {
     view.setShouldDetectTouches(touchDetectorEnabled);
   }
 
-  @ReactProp(name = "faceDetectorEnabled")
-  public void setFaceDetecting(RNCameraView view, boolean faceDetectorEnabled) {
-    view.setShouldDetectFaces(faceDetectorEnabled);
-  }
-
-  @ReactProp(name = "faceDetectionMode")
-  public void setFaceDetectionMode(RNCameraView view, int mode) {
-    view.setFaceDetectionMode(mode);
-  }
-
-  @ReactProp(name = "faceDetectionLandmarks")
-  public void setFaceDetectionLandmarks(RNCameraView view, int landmarks) {
-    view.setFaceDetectionLandmarks(landmarks);
-  }
-
-  @ReactProp(name = "faceDetectionClassifications")
-  public void setFaceDetectionClassifications(RNCameraView view, int classifications) {
-    view.setFaceDetectionClassifications(classifications);
-  }
-
-  @ReactProp(name = "trackingEnabled")
-  public void setTracking(RNCameraView view, boolean trackingEnabled) {
-    view.setTracking(trackingEnabled);
-  }
-
   @ReactProp(name = "googleVisionBarcodeDetectorEnabled")
   public void setGoogleVisionBarcodeDetecting(RNCameraView view, boolean googleBarcodeDetectorEnabled) {
     view.setShouldGoogleDetectBarcodes(googleBarcodeDetectorEnabled);
@@ -217,11 +192,6 @@ public class CameraViewManager extends ViewGroupManager<RNCameraView> {
     view.setGoogleVisionBarcodeMode(barcodeMode);
   }
 
-  @ReactProp(name = "textRecognizerEnabled")
-  public void setTextRecognizing(RNCameraView view, boolean textRecognizerEnabled) {
-    view.setShouldRecognizeText(textRecognizerEnabled);
-  }
-
   /**---limit scan area addition---**/
   @ReactProp(name = "rectOfInterest")
   public void setRectOfInterest(RNCameraView view, ReadableMap coordinates) {
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraPackage.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraPackage.java
index a72a71b..42adff8 100644
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraPackage.java
+++ b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraPackage.java
@@ -8,8 +8,6 @@ import com.facebook.react.uimanager.ViewManager;
 import com.lwansbrough.RCTCamera.RCTCameraModule;
 import com.lwansbrough.RCTCamera.RCTCameraViewManager;
 
-import org.reactnative.facedetector.FaceDetectorModule;
-
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -23,8 +21,7 @@ public class RNCameraPackage implements ReactPackage {
     public List<NativeModule> createNativeModules(ReactApplicationContext reactApplicationContext) {
         return Arrays.<NativeModule>asList(
                 new RCTCameraModule(reactApplicationContext),
-                new CameraModule(reactApplicationContext),
-                new FaceDetectorModule(reactApplicationContext)
+                new CameraModule(reactApplicationContext)
         );
     }
 
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraView.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraView.java
index 16cd1ba..104cdcf 100644
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraView.java
+++ b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraView.java
@@ -29,7 +29,6 @@ import com.google.zxing.Result;
 import org.reactnative.barcodedetector.RNBarcodeDetector;
 import org.reactnative.camera.tasks.*;
 import org.reactnative.camera.utils.RNFileUtils;
-import org.reactnative.facedetector.RNFaceDetector;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -38,8 +37,8 @@ import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
-public class RNCameraView extends CameraView implements LifecycleEventListener, BarCodeScannerAsyncTaskDelegate, FaceDetectorAsyncTaskDelegate,
-    BarcodeDetectorAsyncTaskDelegate, TextRecognizerAsyncTaskDelegate, PictureSavedDelegate {
+public class RNCameraView extends CameraView implements LifecycleEventListener, BarCodeScannerAsyncTaskDelegate,
+    BarcodeDetectorAsyncTaskDelegate, PictureSavedDelegate {
   private ThemedReactContext mThemedReactContext;
   private Queue<Promise> mPictureTakenPromises = new ConcurrentLinkedQueue<>();
   private Map<Promise, ReadableMap> mPictureTakenOptions = new ConcurrentHashMap<>();
@@ -61,22 +60,16 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
 
   // Concurrency lock for scanners to avoid flooding the runtime
   public volatile boolean barCodeScannerTaskLock = false;
-  public volatile boolean faceDetectorTaskLock = false;
   public volatile boolean googleBarcodeDetectorTaskLock = false;
-  public volatile boolean textRecognizerTaskLock = false;
 
   // Scanning-related properties
   private MultiFormatReader mMultiFormatReader;
-  private RNFaceDetector mFaceDetector;
   private RNBarcodeDetector mGoogleBarcodeDetector;
   private boolean mShouldDetectFaces = false;
   private boolean mShouldGoogleDetectBarcodes = false;
   private boolean mShouldScanBarCodes = false;
   private boolean mShouldRecognizeText = false;
   private boolean mShouldDetectTouches = false;
-  private int mFaceDetectorMode = RNFaceDetector.FAST_MODE;
-  private int mFaceDetectionLandmarks = RNFaceDetector.NO_LANDMARKS;
-  private int mFaceDetectionClassifications = RNFaceDetector.NO_CLASSIFICATIONS;
   private int mGoogleVisionBarCodeType = RNBarcodeDetector.ALL_FORMATS;
   private int mGoogleVisionBarCodeMode = RNBarcodeDetector.NORMAL_MODE;
   private boolean mTrackingEnabled = true;
@@ -163,10 +156,8 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
       public void onFramePreview(CameraView cameraView, byte[] data, int width, int height, int rotation) {
         int correctRotation = RNCameraViewHelper.getCorrectCameraRotation(rotation, getFacing(), getCameraOrientation());
         boolean willCallBarCodeTask = mShouldScanBarCodes && !barCodeScannerTaskLock && cameraView instanceof BarCodeScannerAsyncTaskDelegate;
-        boolean willCallFaceTask = mShouldDetectFaces && !faceDetectorTaskLock && cameraView instanceof FaceDetectorAsyncTaskDelegate;
         boolean willCallGoogleBarcodeTask = mShouldGoogleDetectBarcodes && !googleBarcodeDetectorTaskLock && cameraView instanceof BarcodeDetectorAsyncTaskDelegate;
-        boolean willCallTextTask = mShouldRecognizeText && !textRecognizerTaskLock && cameraView instanceof TextRecognizerAsyncTaskDelegate;
-        if (!willCallBarCodeTask && !willCallFaceTask && !willCallGoogleBarcodeTask && !willCallTextTask) {
+        if (!willCallBarCodeTask && !willCallGoogleBarcodeTask ) {
           return;
         }
 
@@ -180,12 +171,6 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
           new BarCodeScannerAsyncTask(delegate, mMultiFormatReader, data, width, height, mLimitScanArea, mScanAreaX, mScanAreaY, mScanAreaWidth, mScanAreaHeight, mCameraViewWidth, mCameraViewHeight, getAspectRatio().toFloat()).execute();
         }
 
-        if (willCallFaceTask) {
-          faceDetectorTaskLock = true;
-          FaceDetectorAsyncTaskDelegate delegate = (FaceDetectorAsyncTaskDelegate) cameraView;
-          new FaceDetectorAsyncTask(delegate, mFaceDetector, data, width, height, correctRotation, getResources().getDisplayMetrics().density, getFacing(), getWidth(), getHeight(), mPaddingX, mPaddingY).execute();
-        }
-
         if (willCallGoogleBarcodeTask) {
           googleBarcodeDetectorTaskLock = true;
           if (mGoogleVisionBarCodeMode == RNBarcodeDetector.NORMAL_MODE) {
@@ -205,12 +190,6 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
                   correctRotation, getResources().getDisplayMetrics().density, getFacing(),
                   getWidth(), getHeight(), mPaddingX, mPaddingY).execute();
         }
-
-        if (willCallTextTask) {
-          textRecognizerTaskLock = true;
-          TextRecognizerAsyncTaskDelegate delegate = (TextRecognizerAsyncTaskDelegate) cameraView;
-          new TextRecognizerAsyncTask(delegate, mThemedReactContext, data, width, height, correctRotation, getResources().getDisplayMetrics().density, getFacing(), getWidth(), getHeight(), mPaddingX, mPaddingY).execute();
-        }
       }
     });
   }
@@ -439,74 +418,6 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
     return true;
   }
 
-  /**
-   * Initial setup of the face detector
-   */
-  private void setupFaceDetector() {
-    mFaceDetector = new RNFaceDetector(mThemedReactContext);
-    mFaceDetector.setMode(mFaceDetectorMode);
-    mFaceDetector.setLandmarkType(mFaceDetectionLandmarks);
-    mFaceDetector.setClassificationType(mFaceDetectionClassifications);
-    mFaceDetector.setTracking(mTrackingEnabled);
-  }
-
-  public void setFaceDetectionLandmarks(int landmarks) {
-    mFaceDetectionLandmarks = landmarks;
-    if (mFaceDetector != null) {
-      mFaceDetector.setLandmarkType(landmarks);
-    }
-  }
-
-  public void setFaceDetectionClassifications(int classifications) {
-    mFaceDetectionClassifications = classifications;
-    if (mFaceDetector != null) {
-      mFaceDetector.setClassificationType(classifications);
-    }
-  }
-
-  public void setFaceDetectionMode(int mode) {
-    mFaceDetectorMode = mode;
-    if (mFaceDetector != null) {
-      mFaceDetector.setMode(mode);
-    }
-  }
-
-  public void setTracking(boolean trackingEnabled) {
-    mTrackingEnabled = trackingEnabled;
-    if (mFaceDetector != null) {
-      mFaceDetector.setTracking(trackingEnabled);
-    }
-  }
-
-  public void setShouldDetectFaces(boolean shouldDetectFaces) {
-    if (shouldDetectFaces && mFaceDetector == null) {
-      setupFaceDetector();
-    }
-    this.mShouldDetectFaces = shouldDetectFaces;
-    setScanning(mShouldDetectFaces || mShouldGoogleDetectBarcodes || mShouldScanBarCodes || mShouldRecognizeText);
-  }
-
-  public void onFacesDetected(WritableArray data) {
-    if (!mShouldDetectFaces) {
-      return;
-    }
-
-    RNCameraViewHelper.emitFacesDetectedEvent(this, data);
-  }
-
-  public void onFaceDetectionError(RNFaceDetector faceDetector) {
-    if (!mShouldDetectFaces) {
-      return;
-    }
-
-    RNCameraViewHelper.emitFaceDetectionErrorEvent(this, faceDetector);
-  }
-
-  @Override
-  public void onFaceDetectingTaskCompleted() {
-    faceDetectorTaskLock = false;
-  }
-
   /**
    * Initial setup of the barcode detector
    */
@@ -571,33 +482,6 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
     googleBarcodeDetectorTaskLock = false;
   }
 
-  /**
-   *
-   * Text recognition
-   */
-
-  public void setShouldRecognizeText(boolean shouldRecognizeText) {
-    this.mShouldRecognizeText = shouldRecognizeText;
-    setScanning(mShouldDetectFaces || mShouldGoogleDetectBarcodes || mShouldScanBarCodes || mShouldRecognizeText);
-  }
-
-  public void onTextRecognized(WritableArray serializedData) {
-    if (!mShouldRecognizeText) {
-      return;
-    }
-
-    RNCameraViewHelper.emitTextRecognizedEvent(this, serializedData);
-  }
-
-  @Override
-  public void onTextRecognizerTaskCompleted() {
-    textRecognizerTaskLock = false;
-  }
-
-  /**
-  *
-  * End Text Recognition */
-
   @Override
   public void onHostResume() {
     if (hasCameraPermissions()) {
@@ -629,9 +513,6 @@ public class RNCameraView extends CameraView implements LifecycleEventListener,
 
   @Override
   public void onHostDestroy() {
-    if (mFaceDetector != null) {
-      mFaceDetector.release();
-    }
     if (mGoogleBarcodeDetector != null) {
       mGoogleBarcodeDetector.release();
     }
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
index b5916e7..9dcadee 100644
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
+++ b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/RNCameraViewHelper.java
@@ -18,7 +18,6 @@ import com.google.android.cameraview.CameraView;
 import com.google.zxing.Result;
 import org.reactnative.camera.events.*;
 import org.reactnative.barcodedetector.RNBarcodeDetector;
-import org.reactnative.facedetector.RNFaceDetector;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
@@ -256,31 +255,6 @@ public class RNCameraViewHelper {
     });
 
   }
-  // Face detection events
-
-  public static void emitFacesDetectedEvent(final ViewGroup view, final WritableArray data) {
-
-    final ReactContext reactContext = (ReactContext) view.getContext();
-    reactContext.runOnNativeModulesQueueThread(new Runnable() {
-      @Override
-      public void run() {
-        FacesDetectedEvent event = FacesDetectedEvent.obtain(view.getId(), data);
-        reactContext.getNativeModule(UIManagerModule.class).getEventDispatcher().dispatchEvent(event);
-      }
-     });
-  }
-
-  public static void emitFaceDetectionErrorEvent(final ViewGroup view, final RNFaceDetector faceDetector) {
-
-    final ReactContext reactContext = (ReactContext) view.getContext();
-    reactContext.runOnNativeModulesQueueThread(new Runnable() {
-      @Override
-      public void run() {
-        FaceDetectionErrorEvent event = FaceDetectionErrorEvent.obtain(view.getId(), faceDetector);
-        reactContext.getNativeModule(UIManagerModule.class).getEventDispatcher().dispatchEvent(event);
-      }
-    });
-  }
 
   // Barcode detection events
 
@@ -321,18 +295,6 @@ public class RNCameraViewHelper {
     });
   }
 
-  // Text recognition event
-
-  public static void emitTextRecognizedEvent(final ViewGroup view, final WritableArray data) {
-    final ReactContext reactContext = (ReactContext) view.getContext();
-    reactContext.runOnNativeModulesQueueThread(new Runnable() {
-      @Override
-      public void run() {
-        TextRecognizedEvent event = TextRecognizedEvent.obtain(view.getId(), data);
-        reactContext.getNativeModule(UIManagerModule.class).getEventDispatcher().dispatchEvent(event);
-      }
-    });
-  }
 
   // Utilities
 
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java
deleted file mode 100644
index 72f7a66..0000000
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/FaceDetectionErrorEvent.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package org.reactnative.camera.events;
-
-import androidx.core.util.Pools;
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.WritableMap;
-import com.facebook.react.uimanager.events.Event;
-import com.facebook.react.uimanager.events.RCTEventEmitter;
-import org.reactnative.camera.CameraViewManager;
-import org.reactnative.facedetector.RNFaceDetector;
-
-public class FaceDetectionErrorEvent extends Event<FaceDetectionErrorEvent> {
-  private static final Pools.SynchronizedPool<FaceDetectionErrorEvent> EVENTS_POOL = new Pools.SynchronizedPool<>(3);
-  private RNFaceDetector mFaceDetector;
-
-  private FaceDetectionErrorEvent() {
-  }
-
-  public static FaceDetectionErrorEvent obtain(int viewTag, RNFaceDetector faceDetector) {
-    FaceDetectionErrorEvent event = EVENTS_POOL.acquire();
-    if (event == null) {
-      event = new FaceDetectionErrorEvent();
-    }
-    event.init(viewTag, faceDetector);
-    return event;
-  }
-
-  private void init(int viewTag, RNFaceDetector faceDetector) {
-    super.init(viewTag);
-    mFaceDetector = faceDetector;
-  }
-
-  @Override
-  public short getCoalescingKey() {
-    return 0;
-  }
-
-  @Override
-  public String getEventName() {
-    return CameraViewManager.Events.EVENT_ON_FACE_DETECTION_ERROR.toString();
-  }
-
-  @Override
-  public void dispatch(RCTEventEmitter rctEventEmitter) {
-    rctEventEmitter.receiveEvent(getViewTag(), getEventName(), serializeEventData());
-  }
-
-  private WritableMap serializeEventData() {
-    WritableMap map = Arguments.createMap();
-    map.putBoolean("isOperational", mFaceDetector != null && mFaceDetector.isOperational());
-    return map;
-  }
-}
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/FacesDetectedEvent.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/FacesDetectedEvent.java
deleted file mode 100644
index ae93e9a..0000000
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/FacesDetectedEvent.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package org.reactnative.camera.events;
-
-import androidx.core.util.Pools;
-
-import org.reactnative.camera.CameraViewManager;
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.WritableArray;
-import com.facebook.react.bridge.WritableMap;
-import com.facebook.react.uimanager.events.Event;
-import com.facebook.react.uimanager.events.RCTEventEmitter;
-
-public class FacesDetectedEvent extends Event<FacesDetectedEvent> {
-  private static final Pools.SynchronizedPool<FacesDetectedEvent> EVENTS_POOL =
-      new Pools.SynchronizedPool<>(3);
-
-  private WritableArray mData;
-
-  private FacesDetectedEvent() {}
-
-  public static FacesDetectedEvent obtain(int viewTag, WritableArray data) {
-    FacesDetectedEvent event = EVENTS_POOL.acquire();
-    if (event == null) {
-      event = new FacesDetectedEvent();
-    }
-    event.init(viewTag, data);
-    return event;
-  }
-
-  private void init(int viewTag, WritableArray data) {
-    super.init(viewTag);
-    mData = data;
-  }
-
-  /**
-   * note(@sjchmiela)
-   * Should the events about detected faces coalesce, the best strategy will be
-   * to ensure that events with different faces count are always being transmitted.
-   */
-  @Override
-  public short getCoalescingKey() {
-    if (mData.size() > Short.MAX_VALUE) {
-      return Short.MAX_VALUE;
-    }
-
-    return (short) mData.size();
-  }
-
-  @Override
-  public String getEventName() {
-    return CameraViewManager.Events.EVENT_ON_FACES_DETECTED.toString();
-  }
-
-  @Override
-  public void dispatch(RCTEventEmitter rctEventEmitter) {
-    rctEventEmitter.receiveEvent(getViewTag(), getEventName(), serializeEventData());
-  }
-
-  private WritableMap serializeEventData() {
-    WritableMap event = Arguments.createMap();
-    event.putString("type", "face");
-    event.putArray("faces", mData);
-    event.putInt("target", getViewTag());
-    return event;
-  }
-}
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/TextRecognizedEvent.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/TextRecognizedEvent.java
deleted file mode 100644
index f785db3..0000000
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/events/TextRecognizedEvent.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package org.reactnative.camera.events;
-
-import androidx.core.util.Pools;
-
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.WritableArray;
-import com.facebook.react.bridge.WritableMap;
-import com.facebook.react.uimanager.events.Event;
-import com.facebook.react.uimanager.events.RCTEventEmitter;
-
-import org.reactnative.camera.CameraViewManager;
-
-
-public class TextRecognizedEvent extends Event<TextRecognizedEvent> {
-
-  private static final Pools.SynchronizedPool<TextRecognizedEvent> EVENTS_POOL =
-      new Pools.SynchronizedPool<>(3);
-
-  private WritableArray mData;
-
-  private TextRecognizedEvent() {}
-
-  public static TextRecognizedEvent obtain(int viewTag, WritableArray data) {
-    TextRecognizedEvent event = EVENTS_POOL.acquire();
-    if (event == null) {
-      event = new TextRecognizedEvent();
-    }
-    event.init(viewTag, data);
-    return event;
-  }
-
-  private void init(int viewTag, WritableArray data) {
-    super.init(viewTag);
-    mData = data;
-  }
-
-  @Override
-  public String getEventName() {
-    return CameraViewManager.Events.EVENT_ON_TEXT_RECOGNIZED.toString();
-  }
-
-  @Override
-  public void dispatch(RCTEventEmitter rctEventEmitter) {
-    rctEventEmitter.receiveEvent(getViewTag(), getEventName(), createEvent());
-  }
-
-  private WritableMap createEvent() {
-    WritableMap event = Arguments.createMap();
-    event.putString("type", "textBlock");
-    event.putArray("textBlocks", mData);
-    event.putInt("target", getViewTag());
-    return event;
-  }
-}
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/tasks/FaceDetectorAsyncTaskDelegate.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/tasks/FaceDetectorAsyncTaskDelegate.java
deleted file mode 100644
index 8cf97a6..0000000
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/tasks/FaceDetectorAsyncTaskDelegate.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package org.reactnative.camera.tasks;
-
-import org.reactnative.facedetector.RNFaceDetector;
-
-import com.facebook.react.bridge.WritableArray;
-
-public interface FaceDetectorAsyncTaskDelegate {
-  void onFacesDetected(WritableArray faces);
-  void onFaceDetectionError(RNFaceDetector faceDetector);
-  void onFaceDetectingTaskCompleted();
-}
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/tasks/TextRecognizerAsyncTaskDelegate.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/tasks/TextRecognizerAsyncTaskDelegate.java
deleted file mode 100644
index 1cf44af..0000000
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/tasks/TextRecognizerAsyncTaskDelegate.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package org.reactnative.camera.tasks;
-
-import com.facebook.react.bridge.WritableArray;
-
-public interface TextRecognizerAsyncTaskDelegate {
-  void onTextRecognized(WritableArray serializedData);
-  void onTextRecognizerTaskCompleted();
-}
diff --git a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/utils/RNFileUtils.java b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/utils/RNFileUtils.java
index f0dd871..53f8cf3 100644
--- a/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/utils/RNFileUtils.java
+++ b/node_modules/react-native-camera/android/src/main/java/org/reactnative/camera/utils/RNFileUtils.java
@@ -1,6 +1,5 @@
 package org.reactnative.camera.utils;
 
-import android.content.Context;
 import android.net.Uri;
 
 
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/BarcodeFormatUtils.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/BarcodeFormatUtils.java
index 93b3ef1..d49ca0c 100644
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/BarcodeFormatUtils.java
+++ b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/BarcodeFormatUtils.java
@@ -1,7 +1,7 @@
 package org.reactnative.barcodedetector;
 
 import android.util.SparseArray;
-import com.google.mlkit.vision.barcode.Barcode;
+import com.google.mlkit.vision.barcode.common.Barcode;
 
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/RNBarcodeDetector.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/RNBarcodeDetector.java
index ae0c0d9..f38d8fc 100644
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/RNBarcodeDetector.java
+++ b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/barcodedetector/RNBarcodeDetector.java
@@ -3,7 +3,7 @@ package org.reactnative.barcodedetector;
 import android.content.Context;
 import android.util.Log;
 
-import com.google.mlkit.vision.barcode.Barcode;
+import com.google.mlkit.vision.barcode.common.Barcode;
 import com.google.mlkit.vision.barcode.BarcodeScanner;
 import com.google.mlkit.vision.barcode.BarcodeScanning;
 import com.google.mlkit.vision.barcode.BarcodeScannerOptions;
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/BarcodeDetectorAsyncTask.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/BarcodeDetectorAsyncTask.java
index c64cd80..dc57344 100644
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/BarcodeDetectorAsyncTask.java
+++ b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/BarcodeDetectorAsyncTask.java
@@ -9,7 +9,7 @@ import com.facebook.react.bridge.WritableArray;
 import com.facebook.react.bridge.WritableMap;
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.android.gms.tasks.OnSuccessListener;
-import com.google.mlkit.vision.barcode.Barcode;
+import com.google.mlkit.vision.barcode.common.Barcode;
 import com.google.mlkit.vision.barcode.BarcodeScanner;
 import com.google.mlkit.vision.common.InputImage;
 
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/FaceDetectorAsyncTask.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/FaceDetectorAsyncTask.java
deleted file mode 100644
index 343ec9e..0000000
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/FaceDetectorAsyncTask.java
+++ /dev/null
@@ -1,130 +0,0 @@
-package org.reactnative.camera.tasks;
-
-import android.util.Log;
-
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.WritableArray;
-import com.facebook.react.bridge.WritableMap;
-import com.google.android.cameraview.CameraView;
-import com.google.android.gms.tasks.OnFailureListener;
-import com.google.android.gms.tasks.OnSuccessListener;
-import com.google.mlkit.vision.common.InputImage;
-import com.google.mlkit.vision.face.Face;
-import com.google.mlkit.vision.face.FaceDetector;
-
-import org.reactnative.camera.utils.ImageDimensions;
-import org.reactnative.facedetector.FaceDetectorUtils;
-import org.reactnative.facedetector.RNFaceDetector;
-
-import java.util.List;
-
-public class FaceDetectorAsyncTask extends android.os.AsyncTask<Void, Void, Void> {
-  private byte[] mImageData;
-  private int mWidth;
-  private int mHeight;
-  private int mRotation;
-  private RNFaceDetector mFaceDetector;
-  private FaceDetectorAsyncTaskDelegate mDelegate;
-  private double mScaleX;
-  private double mScaleY;
-  private ImageDimensions mImageDimensions;
-  private int mPaddingLeft;
-  private int mPaddingTop;
-  private String TAG = "RNCamera";
-
-  public FaceDetectorAsyncTask(
-      FaceDetectorAsyncTaskDelegate delegate,
-      RNFaceDetector faceDetector,
-      byte[] imageData,
-      int width,
-      int height,
-      int rotation,
-      float density,
-      int facing,
-      int viewWidth,
-      int viewHeight,
-      int viewPaddingLeft,
-      int viewPaddingTop
-  ) {
-    mImageData = imageData;
-    mWidth = width;
-    mHeight = height;
-    mRotation = rotation;
-    mDelegate = delegate;
-    mFaceDetector = faceDetector;
-    mImageDimensions = new ImageDimensions(width, height, rotation, facing);
-    mScaleX = (double) (viewWidth) / (mImageDimensions.getWidth() * density);
-    mScaleY = (double) (viewHeight) / (mImageDimensions.getHeight() * density);
-    mPaddingLeft = viewPaddingLeft;
-    mPaddingTop = viewPaddingTop;
-  }
-
-  @Override
-  protected Void doInBackground(Void... ignored) {
-    if (isCancelled() || mDelegate == null || mFaceDetector == null) {
-      return null;
-    }
-    InputImage image = InputImage.fromByteArray(mImageData, mWidth, mHeight, getFirebaseRotation(), InputImage.IMAGE_FORMAT_YV12);
-
-    FaceDetector detector = mFaceDetector.getDetector();
-    detector.process(image)
-            .addOnSuccessListener(
-                    new OnSuccessListener<List<Face>>() {
-                      @Override
-                      public void onSuccess(List<Face> faces) {
-                        WritableArray facesList = serializeEventData(faces);
-                        mDelegate.onFacesDetected(facesList);
-                        mDelegate.onFaceDetectingTaskCompleted();
-                      }
-                    })
-            .addOnFailureListener(
-                    new OnFailureListener() {
-                      @Override
-                      public void onFailure(Exception e) {
-                        Log.e(TAG, "Text recognition task failed" + e);
-                        mDelegate.onFaceDetectingTaskCompleted();
-                      }
-                    });
-    return null;
-  }
-
-  private int getFirebaseRotation(){
-    int result;
-    switch (mRotation) {
-      case 0:
-        result = 0;
-        break;
-      case 90:
-        result = 90;
-        break;
-      case 180:
-        result = 180;
-        break;
-      case 270:
-      case -90:
-        result = 270;
-        break;
-      default:
-        result = 0;
-        Log.e(TAG, "Bad rotation value: " + mRotation);
-    }
-    return result;
-  }
-
-  private WritableArray serializeEventData(List<Face> faces) {
-    WritableArray facesList = Arguments.createArray();
-
-    for (Face face : faces) {
-      WritableMap serializedFace = FaceDetectorUtils.serializeFace(face, mScaleX, mScaleY, mWidth, mHeight, mPaddingLeft, mPaddingTop);
-      if (mImageDimensions.getFacing() == CameraView.FACING_FRONT) {
-        serializedFace = FaceDetectorUtils.rotateFaceX(serializedFace, mImageDimensions.getWidth(), mScaleX);
-      } else {
-        serializedFace = FaceDetectorUtils.changeAnglesDirection(serializedFace);
-      }
-      facesList.pushMap(serializedFace);
-    }
-
-    return facesList;
-  }
-
-}
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/TextRecognizerAsyncTask.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/TextRecognizerAsyncTask.java
deleted file mode 100644
index 0741653..0000000
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/camera/tasks/TextRecognizerAsyncTask.java
+++ /dev/null
@@ -1,262 +0,0 @@
-package org.reactnative.camera.tasks;
-
-import android.graphics.Rect;
-import android.util.Log;
-
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.ReadableArray;
-import com.facebook.react.bridge.ReadableMap;
-import com.facebook.react.bridge.WritableArray;
-import com.facebook.react.bridge.WritableMap;
-import com.facebook.react.uimanager.ThemedReactContext;
-
-import com.google.android.cameraview.CameraView;
-import com.google.android.gms.tasks.OnFailureListener;
-import com.google.android.gms.tasks.OnSuccessListener;
-import com.google.mlkit.vision.common.InputImage;
-import com.google.mlkit.vision.text.Text;
-import com.google.mlkit.vision.text.TextRecognizer;
-import com.google.mlkit.vision.text.TextRecognition;
-import com.google.mlkit.vision.text.TextRecognizerOptions;
-
-import org.reactnative.camera.utils.ImageDimensions;
-
-import java.util.List;
-
-
-public class TextRecognizerAsyncTask extends android.os.AsyncTask<Void, Void, Void> {
-
-  private TextRecognizerAsyncTaskDelegate mDelegate;
-  private ThemedReactContext mThemedReactContext;
-  private byte[] mImageData;
-  private int mWidth;
-  private int mHeight;
-  private int mRotation;
-  private double mScaleX;
-  private double mScaleY;
-  private ImageDimensions mImageDimensions;
-  private int mPaddingLeft;
-  private int mPaddingTop;
-  private String TAG = "RNCamera";
-
-  public TextRecognizerAsyncTask(
-      TextRecognizerAsyncTaskDelegate delegate,
-      ThemedReactContext themedReactContext,
-      byte[] imageData,
-      int width,
-      int height,
-      int rotation,
-      float density,
-      int facing,
-      int viewWidth,
-      int viewHeight,
-      int viewPaddingLeft,
-      int viewPaddingTop
-  ) {
-    mDelegate = delegate;
-    mImageData = imageData;
-    mWidth = width;
-    mHeight = height;
-    mRotation = rotation;
-    mImageDimensions = new ImageDimensions(width, height, rotation, facing);
-    mScaleX = (double) (viewWidth) / (mImageDimensions.getWidth() * density);
-    mScaleY = (double) (viewHeight) / (mImageDimensions.getHeight() * density);
-    mPaddingLeft = viewPaddingLeft;
-    mPaddingTop = viewPaddingTop;
-  }
-
-  @Override
-  protected Void doInBackground(Void... ignored) {
-    if (isCancelled() || mDelegate == null) {
-      return null;
-    }
-
-    TextRecognizer detector = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS);
-
-    InputImage image = InputImage.fromByteArray(mImageData, mWidth, mHeight, getFirebaseRotation(), InputImage.IMAGE_FORMAT_YV12);
-    detector.process(image)
-            .addOnSuccessListener(new OnSuccessListener<Text>() {
-              @Override
-              public void onSuccess(Text firebaseVisionText) {
-                List<Text.TextBlock> textBlocks = firebaseVisionText.getTextBlocks();
-                WritableArray serializedData = serializeEventData(textBlocks);
-                mDelegate.onTextRecognized(serializedData);
-                mDelegate.onTextRecognizerTaskCompleted();
-                }
-            })
-            .addOnFailureListener(
-                    new OnFailureListener() {
-                      @Override
-                      public void onFailure(Exception e) {
-                        Log.e(TAG, "Text recognition task failed" + e);
-                        mDelegate.onTextRecognizerTaskCompleted();
-                        }
-                    });
-
-    return null;
-  }
-
-  private int getFirebaseRotation(){
-    int result;
-    switch (mRotation) {
-      case 0:
-        result = 0;
-        break;
-      case 90:
-        result = 90;
-        break;
-      case 180:
-        result = 180;
-        break;
-      case -90:
-      case 270:
-        result = 270;
-        break;
-      default:
-        result = 0;
-        Log.e(TAG, "Bad rotation value: " + mRotation);
-    }
-    return result;
-  }
-
-  private WritableArray serializeEventData(List<Text.TextBlock> textBlocks) {
-    WritableArray textBlocksList = Arguments.createArray();
-    for (Text.TextBlock block: textBlocks) {
-      WritableMap serializedTextBlock = serializeBloc(block);
-      if (mImageDimensions.getFacing() == CameraView.FACING_FRONT) {
-        serializedTextBlock = rotateTextX(serializedTextBlock);
-      }
-      textBlocksList.pushMap(serializedTextBlock);
-    }
-
-    return textBlocksList;
-  }
-
-  private WritableMap serializeBloc(Text.TextBlock block) {
-    WritableMap encodedText = Arguments.createMap();
-    WritableArray lines = Arguments.createArray();
-    for (Text.Line line : block.getLines()) {
-      lines.pushMap(serializeLine(line));
-    }
-    encodedText.putArray("components", lines);
-
-    encodedText.putString("value", block.getText());
-
-    WritableMap bounds = processBounds(block.getBoundingBox());
-
-    encodedText.putMap("bounds", bounds);
-
-    encodedText.putString("type", "block");
-    return encodedText;
-  }
-
-  private WritableMap serializeLine(Text.Line line) {
-    WritableMap encodedText = Arguments.createMap();
-    WritableArray lines = Arguments.createArray();
-    for (Text.Element element : line.getElements()) {
-      lines.pushMap(serializeElement(element));
-    }
-    encodedText.putArray("components", lines);
-
-    encodedText.putString("value", line.getText());
-
-    WritableMap bounds = processBounds(line.getBoundingBox());
-
-    encodedText.putMap("bounds", bounds);
-
-    encodedText.putString("type", "line");
-    return encodedText;
-  }
-
-  private WritableMap serializeElement(Text.Element element) {
-    WritableMap encodedText = Arguments.createMap();
-
-    encodedText.putString("value", element.getText());
-
-    WritableMap bounds = processBounds(element.getBoundingBox());
-
-    encodedText.putMap("bounds", bounds);
-
-    encodedText.putString("type", "element");
-    return encodedText;
-  }
-
-  private WritableMap processBounds(Rect frame) {
-    WritableMap origin = Arguments.createMap();
-    int x = frame.left;
-    int y = frame.top;
-
-    if (frame.left < mWidth / 2) {
-      x = x + mPaddingLeft / 2;
-    } else if (frame.left > mWidth /2) {
-      x = x - mPaddingLeft / 2;
-    }
-
-    if (frame.top < mHeight / 2) {
-      y = y + mPaddingTop / 2;
-    } else if (frame.top > mHeight / 2) {
-      y = y - mPaddingTop / 2;
-    }
-
-    origin.putDouble("x", x * mScaleX);
-    origin.putDouble("y", y * mScaleY);
-
-    WritableMap size = Arguments.createMap();
-    size.putDouble("width", frame.width() * mScaleX);
-    size.putDouble("height", frame.height() * mScaleY);
-
-    WritableMap bounds = Arguments.createMap();
-    bounds.putMap("origin", origin);
-    bounds.putMap("size", size);
-    return bounds;
-  }
-
-  private WritableMap rotateTextX(WritableMap text) {
-    ReadableMap faceBounds = text.getMap("bounds");
-
-    ReadableMap oldOrigin = faceBounds.getMap("origin");
-    WritableMap mirroredOrigin = positionMirroredHorizontally(
-            oldOrigin, mImageDimensions.getWidth(), mScaleX);
-
-    double translateX = -faceBounds.getMap("size").getDouble("width");
-    WritableMap translatedMirroredOrigin = positionTranslatedHorizontally(mirroredOrigin, translateX);
-
-    WritableMap newBounds = Arguments.createMap();
-    newBounds.merge(faceBounds);
-    newBounds.putMap("origin", translatedMirroredOrigin);
-
-    text.putMap("bounds", newBounds);
-
-    ReadableArray oldComponents = text.getArray("components");
-    WritableArray newComponents = Arguments.createArray();
-    for (int i = 0; i < oldComponents.size(); ++i) {
-      WritableMap component = Arguments.createMap();
-      component.merge(oldComponents.getMap(i));
-      rotateTextX(component);
-      newComponents.pushMap(component);
-    }
-    text.putArray("components", newComponents);
-
-    return text;
-  }
-
-  public static WritableMap positionTranslatedHorizontally(ReadableMap position, double translateX) {
-    WritableMap newPosition = Arguments.createMap();
-    newPosition.merge(position);
-    newPosition.putDouble("x", position.getDouble("x") + translateX);
-    return newPosition;
-  }
-
-  public static WritableMap positionMirroredHorizontally(ReadableMap position, int containerWidth, double scaleX) {
-    WritableMap newPosition = Arguments.createMap();
-    newPosition.merge(position);
-    newPosition.putDouble("x", valueMirroredHorizontally(position.getDouble("x"), containerWidth, scaleX));
-    return newPosition;
-  }
-
-  public static double valueMirroredHorizontally(double elementX, int containerWidth, double scaleX) {
-    double originalX = elementX / scaleX;
-    double mirroredX = containerWidth - originalX;
-    return mirroredX * scaleX;
-  }
-}
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/FaceDetectorModule.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/FaceDetectorModule.java
deleted file mode 100644
index 62aac6d..0000000
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/FaceDetectorModule.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package org.reactnative.facedetector;
-
-import org.reactnative.facedetector.tasks.FileFaceDetectionAsyncTask;
-import com.facebook.react.bridge.Promise;
-import com.facebook.react.bridge.ReactApplicationContext;
-import com.facebook.react.bridge.ReactContextBaseJavaModule;
-import com.facebook.react.bridge.ReactMethod;
-import com.facebook.react.bridge.ReadableMap;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.annotation.Nullable;
-
-public class FaceDetectorModule extends ReactContextBaseJavaModule {
-  private static final String TAG = "RNFaceDetector";
-//  private ScopedContext mScopedContext;
-private static ReactApplicationContext mScopedContext;
-
-  public FaceDetectorModule(ReactApplicationContext reactContext) {
-    super(reactContext);
-    mScopedContext = reactContext;
-  }
-
-  @Override
-  public String getName() {
-    return TAG;
-  }
-
-  @Nullable
-  @Override
-  public Map<String, Object> getConstants() {
-    return Collections.unmodifiableMap(new HashMap<String, Object>() {
-      {
-        put("Mode", getFaceDetectionModeConstants());
-        put("Landmarks", getFaceDetectionLandmarksConstants());
-        put("Classifications", getFaceDetectionClassificationsConstants());
-      }
-
-      private Map<String, Object> getFaceDetectionModeConstants() {
-        return Collections.unmodifiableMap(new HashMap<String, Object>() {
-          {
-            put("fast", RNFaceDetector.FAST_MODE);
-            put("accurate", RNFaceDetector.ACCURATE_MODE);
-          }
-        });
-      }
-
-      private Map<String, Object> getFaceDetectionClassificationsConstants() {
-        return Collections.unmodifiableMap(new HashMap<String, Object>() {
-          {
-            put("all", RNFaceDetector.ALL_CLASSIFICATIONS);
-            put("none", RNFaceDetector.NO_CLASSIFICATIONS);
-          }
-        });
-      }
-
-      private Map<String, Object> getFaceDetectionLandmarksConstants() {
-        return Collections.unmodifiableMap(new HashMap<String, Object>() {
-          {
-            put("all", RNFaceDetector.ALL_LANDMARKS);
-            put("none", RNFaceDetector.NO_LANDMARKS);
-          }
-        });
-      }
-    });
-  }
-
-  @ReactMethod
-  public void detectFaces(ReadableMap options, final Promise promise) {
-    new FileFaceDetectionAsyncTask(mScopedContext, options, promise).execute();
-  }
-}
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/FaceDetectorUtils.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/FaceDetectorUtils.java
deleted file mode 100644
index 4b7d2e9..0000000
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/FaceDetectorUtils.java
+++ /dev/null
@@ -1,167 +0,0 @@
-package org.reactnative.facedetector;
-
-import android.graphics.PointF;
-
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.ReadableMap;
-import com.facebook.react.bridge.WritableMap;
-import com.google.mlkit.vision.face.Face;
-import com.google.mlkit.vision.face.FaceLandmark;
-
-public class FaceDetectorUtils {
-  private static final String[] landmarkNames = {
-          "bottomMouthPosition", "leftCheekPosition", "leftEarPosition",
-          "leftEyePosition", "leftMouthPosition", "noseBasePosition", "rightCheekPosition",
-          "rightEarPosition", "rightEyePosition", "rightMouthPosition"
-  };
-
-  public static WritableMap serializeFace(Face face) {
-    return serializeFace(face, 1, 1, 0, 0, 0, 0);
-  }
-
-  public static WritableMap serializeFace(Face face, double scaleX, double scaleY, int width, int height, int paddingLeft, int paddingTop) {
-    WritableMap encodedFace = Arguments.createMap();
-
-    int id = 0;
-    // If face tracking was enabled:
-    if (face.getTrackingId() != null) {
-      id = face.getTrackingId();
-    }
-
-
-    encodedFace.putInt("faceID", id);
-    encodedFace.putDouble("rollAngle", face.getHeadEulerAngleZ());
-    encodedFace.putDouble("yawAngle", face.getHeadEulerAngleY());
-
-    // If classification was enabled:
-    if (face.getSmilingProbability() != null) {
-      encodedFace.putDouble("smilingProbability", face.getSmilingProbability());
-    }
-    if (face.getLeftEyeOpenProbability() != null) {
-      encodedFace.putDouble("leftEyeOpenProbability", face.getLeftEyeOpenProbability());
-    }
-    if (face.getRightEyeOpenProbability() != null) {
-      encodedFace.putDouble("rightEyeOpenProbability", face.getRightEyeOpenProbability());
-    }
-    int[] landmarks = {
-            FaceLandmark.MOUTH_BOTTOM,
-            FaceLandmark.LEFT_CHEEK,
-            FaceLandmark.LEFT_EAR,
-            FaceLandmark.LEFT_EYE,
-            FaceLandmark.MOUTH_LEFT,
-            FaceLandmark.NOSE_BASE,
-            FaceLandmark.RIGHT_CHEEK,
-            FaceLandmark.RIGHT_EAR,
-            FaceLandmark.RIGHT_EYE,
-            FaceLandmark.MOUTH_RIGHT};
-
-    for (int i = 0; i < landmarks.length; ++i) {
-      FaceLandmark landmark = face.getLandmark(landmarks[i]);
-      if (landmark != null) {
-        encodedFace.putMap(landmarkNames[i], mapFromPoint(landmark.getPosition(), scaleX, scaleY, width, height, paddingLeft, paddingTop));
-      }
-    }
-
-    WritableMap origin = Arguments.createMap();
-    Float x = face.getBoundingBox().exactCenterX() - (face.getBoundingBox().width() / 2 );
-    Float y = face.getBoundingBox().exactCenterY() - (face.getBoundingBox().height() / 2);
-    if (face.getBoundingBox().exactCenterX() < width / 2) {
-      x = x + paddingLeft / 2;
-    } else if (face.getBoundingBox().exactCenterX() > width / 2) {
-      x = x - paddingLeft / 2;
-    }
-
-    if (face.getBoundingBox().exactCenterY() < height / 2) {
-      y = y + paddingTop / 2;
-    } else if (face.getBoundingBox().exactCenterY() > height / 2) {
-      y = y - paddingTop / 2;
-    }
-
-    origin.putDouble("x", x * scaleX);
-    origin.putDouble("y", y * scaleY);
-
-    WritableMap size = Arguments.createMap();
-    size.putDouble("width", face.getBoundingBox().width() * scaleX);
-    size.putDouble("height", face.getBoundingBox().height() * scaleY);
-
-    WritableMap bounds = Arguments.createMap();
-    bounds.putMap("origin", origin);
-    bounds.putMap("size", size);
-
-    encodedFace.putMap("bounds", bounds);
-
-    return encodedFace;
-  }
-
-  public static WritableMap rotateFaceX(WritableMap face, int sourceWidth, double scaleX) {
-    ReadableMap faceBounds = face.getMap("bounds");
-
-    ReadableMap oldOrigin = faceBounds.getMap("origin");
-    WritableMap mirroredOrigin = positionMirroredHorizontally(oldOrigin, sourceWidth, scaleX);
-
-    double translateX = -faceBounds.getMap("size").getDouble("width");
-    WritableMap translatedMirroredOrigin = positionTranslatedHorizontally(mirroredOrigin, translateX);
-
-    WritableMap newBounds = Arguments.createMap();
-    newBounds.merge(faceBounds);
-    newBounds.putMap("origin", translatedMirroredOrigin);
-
-    for (String landmarkName : landmarkNames) {
-      ReadableMap landmark = face.hasKey(landmarkName) ? face.getMap(landmarkName) : null;
-      if (landmark != null) {
-        WritableMap mirroredPosition = positionMirroredHorizontally(landmark, sourceWidth, scaleX);
-        face.putMap(landmarkName, mirroredPosition);
-      }
-    }
-
-    face.putMap("bounds", newBounds);
-
-    return face;
-  }
-
-  public static WritableMap changeAnglesDirection(WritableMap face) {
-    face.putDouble("rollAngle", (-face.getDouble("rollAngle") + 360) % 360);
-    face.putDouble("yawAngle", (-face.getDouble("yawAngle") + 360) % 360);
-    return face;
-  }
-
-  public static WritableMap mapFromPoint(PointF point, double scaleX, double scaleY, int width, int height, int paddingLeft, int paddingTop) {
-    WritableMap map = Arguments.createMap();
-    Float x = point.x;
-    Float y = point.y;
-    if (point.x < width / 2) {
-      x = (x + paddingLeft / 2);
-    } else if (point.x > width / 2) {
-      x = (x - paddingLeft / 2);
-    }
-
-    if (point.y < height / 2) {
-      y = (y + paddingTop / 2);
-    } else if (point.y > height / 2) {
-      y = (y - paddingTop / 2);
-    }
-    map.putDouble("x", x * scaleX);
-    map.putDouble("y", y * scaleY);
-    return map;
-  }
-
-  public static WritableMap positionTranslatedHorizontally(ReadableMap position, double translateX) {
-    WritableMap newPosition = Arguments.createMap();
-    newPosition.merge(position);
-    newPosition.putDouble("x", position.getDouble("x") + translateX);
-    return newPosition;
-  }
-
-  public static WritableMap positionMirroredHorizontally(ReadableMap position, int containerWidth, double scaleX) {
-    WritableMap newPosition = Arguments.createMap();
-    newPosition.merge(position);
-    newPosition.putDouble("x", valueMirroredHorizontally(position.getDouble("x"), containerWidth, scaleX));
-    return newPosition;
-  }
-
-  public static double valueMirroredHorizontally(double elementX, int containerWidth, double scaleX) {
-    double originalX = elementX / scaleX;
-    double mirroredX = containerWidth - originalX;
-    return mirroredX * scaleX;
-  }
-}
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/RNFaceDetector.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/RNFaceDetector.java
deleted file mode 100644
index 722b320..0000000
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/RNFaceDetector.java
+++ /dev/null
@@ -1,97 +0,0 @@
-package org.reactnative.facedetector;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.google.mlkit.vision.face.FaceDetector;
-import com.google.mlkit.vision.face.FaceDetection;
-import com.google.mlkit.vision.face.FaceDetectorOptions;
-
-
-public class RNFaceDetector {
-  public static int ALL_CLASSIFICATIONS = FaceDetectorOptions.CLASSIFICATION_MODE_ALL;
-  public static int NO_CLASSIFICATIONS = FaceDetectorOptions.CLASSIFICATION_MODE_NONE;
-  public static int ALL_LANDMARKS = FaceDetectorOptions.LANDMARK_MODE_ALL;
-  public static int NO_LANDMARKS = FaceDetectorOptions.LANDMARK_MODE_NONE;
-  public static int ACCURATE_MODE = FaceDetectorOptions.PERFORMANCE_MODE_ACCURATE;
-  public static int FAST_MODE = FaceDetectorOptions.PERFORMANCE_MODE_FAST;
-  // TODO contours detection is possible for MLKit-based face detector, implement this feature
-  public static int ALL_CONTOURS = FaceDetectorOptions.CONTOUR_MODE_ALL;
-  public static int NO_CONTOURS = FaceDetectorOptions.CONTOUR_MODE_NONE;
-
-  private FaceDetector mFaceDetector = null;
-  private FaceDetectorOptions.Builder mBuilder;
-
-  private int mClassificationType = NO_CLASSIFICATIONS;
-  private int mLandmarkType = NO_LANDMARKS;
-  private float mMinFaceSize = 0.15f;
-  private int mMode = FAST_MODE;
-
-  public RNFaceDetector(Context context) {
-    mBuilder = new FaceDetectorOptions.Builder()
-            .setPerformanceMode(mMode)
-            .setLandmarkMode(mLandmarkType)
-            .setClassificationMode(mClassificationType)
-            .setMinFaceSize(mMinFaceSize);
-  }
-
-  public boolean isOperational() {
-    // Legacy api from GMV
-    return true;
-  }
-
-  public FaceDetector getDetector() {
-
-    if (mFaceDetector == null) {
-      createFaceDetector();
-    }
-    return mFaceDetector;
-  }
-
-  public void setClassificationType(int classificationType) {
-    if (classificationType != mClassificationType) {
-      release();
-      mBuilder.setClassificationMode(classificationType);
-      mClassificationType = classificationType;
-    }
-  }
-
-  public void setLandmarkType(int landmarkType) {
-    if (landmarkType != mLandmarkType) {
-      release();
-      mBuilder.setLandmarkMode(landmarkType);
-      mLandmarkType = landmarkType;
-    }
-  }
-
-  public void setMode(int mode) {
-    if (mode != mMode) {
-      release();
-      mBuilder.setPerformanceMode(mode);
-      mMode = mode;
-    }
-  }
-
-  public void setTracking(boolean tracking) {
-    release();
-    if (tracking) {
-      mBuilder.enableTracking();
-    }
-  }
-
-  public void release() {
-    if (mFaceDetector != null) {
-      try {
-        mFaceDetector.close();
-      } catch (Exception e) {
-        Log.e("RNCamera", "Attempt to close FaceDetector failed");
-      }
-      mFaceDetector = null;
-    }
-  }
-
-  private void createFaceDetector() {
-    FaceDetectorOptions options = mBuilder.build();
-    mFaceDetector = FaceDetection.getClient(options);
-  }
-}
diff --git a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java b/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
deleted file mode 100644
index 073138a..0000000
--- a/node_modules/react-native-camera/android/src/mlkit/java/org/reactnative/facedetector/tasks/FileFaceDetectionAsyncTask.java
+++ /dev/null
@@ -1,167 +0,0 @@
-package org.reactnative.facedetector.tasks;
-
-import android.content.Context;
-import androidx.exifinterface.media.ExifInterface;
-import android.net.Uri;
-import android.os.AsyncTask;
-import android.util.Log;
-
-import org.reactnative.facedetector.RNFaceDetector;
-import org.reactnative.facedetector.FaceDetectorUtils;
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.Promise;
-import com.facebook.react.bridge.ReadableMap;
-import com.facebook.react.bridge.WritableArray;
-import com.facebook.react.bridge.WritableMap;
-import com.google.android.gms.tasks.OnFailureListener;
-import com.google.android.gms.tasks.OnSuccessListener;
-import com.google.mlkit.vision.common.InputImage;
-import com.google.mlkit.vision.face.Face;
-import com.google.mlkit.vision.face.FaceDetector;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.List;
-
-public class FileFaceDetectionAsyncTask extends AsyncTask<Void, Void, Void> {
-  private static final String ERROR_TAG = "E_FACE_DETECTION_FAILED";
-
-  private static final String MODE_OPTION_KEY = "mode";
-  private static final String DETECT_LANDMARKS_OPTION_KEY = "detectLandmarks";
-  private static final String RUN_CLASSIFICATIONS_OPTION_KEY = "runClassifications";
-
-  private String mUri;
-  private String mPath;
-  private Promise mPromise;
-  private int mWidth = 0;
-  private int mHeight = 0;
-  private Context mContext;
-  private ReadableMap mOptions;
-  private int mOrientation = ExifInterface.ORIENTATION_UNDEFINED;
-  private RNFaceDetector mRNFaceDetector;
-
-  public FileFaceDetectionAsyncTask(Context context, ReadableMap options, Promise promise) {
-    mUri = options.getString("uri");
-    mPromise = promise;
-    mOptions = options;
-    mContext = context;
-  }
-
-  @Override
-  protected void onPreExecute() {
-    if (mUri == null) {
-      mPromise.reject(ERROR_TAG, "You have to provide an URI of an image.");
-      cancel(true);
-      return;
-    }
-
-    Uri uri = Uri.parse(mUri);
-    mPath = uri.getPath();
-
-    if (mPath == null) {
-      mPromise.reject(ERROR_TAG, "Invalid URI provided: `" + mUri + "`.");
-      cancel(true);
-      return;
-    }
-
-    // We have to check if the requested image is in a directory safely accessible by our app.
-    boolean fileIsInSafeDirectories =
-          mPath.startsWith(mContext.getCacheDir().getPath()) || mPath.startsWith(mContext.getFilesDir().getPath());
-
-    if (!fileIsInSafeDirectories) {
-      mPromise.reject(ERROR_TAG, "The image has to be in the local app's directories.");
-      cancel(true);
-      return;
-    }
-
-    if(!new File(mPath).exists()) {
-      mPromise.reject(ERROR_TAG, "The file does not exist. Given path: `" + mPath + "`.");
-      cancel(true);
-    }
-  }
-
-  @Override
-  protected Void doInBackground(Void... voids) {
-    if (isCancelled()) {
-      return null;
-    }
-
-    mRNFaceDetector = detectorForOptions(mOptions, mContext);
-
-    try {
-      ExifInterface exif = new ExifInterface(mPath);
-      mOrientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);
-    } catch (IOException e) {
-      Log.e(ERROR_TAG, "Reading orientation from file `" + mPath + "` failed.", e);
-    }
-
-    try {
-      InputImage image = InputImage.fromFilePath(mContext, Uri.parse(mUri));
-      FaceDetector detector = mRNFaceDetector.getDetector();
-      detector.process(image)
-              .addOnSuccessListener(
-                      new OnSuccessListener<List<Face>>() {
-                        @Override
-                        public void onSuccess(List<Face> faces) {
-                          serializeEventData(faces);
-                        }
-                      })
-              .addOnFailureListener(
-                      new OnFailureListener() {
-                        @Override
-                        public void onFailure(Exception e) {
-                          Log.e(ERROR_TAG, "Text recognition task failed", e);
-                          mPromise.reject(ERROR_TAG, "Text recognition task failed", e);
-                        }
-                      });
-    } catch (IOException e) {
-      e.printStackTrace();
-      Log.e(ERROR_TAG, "Creating Firebase Image from uri" + mUri + "failed", e);
-      mPromise.reject(ERROR_TAG, "Creating Firebase Image from uri" + mUri + "failed", e);
-    }
-    return null;
-  }
-
-  private void serializeEventData(List<Face> faces) {
-    WritableMap result = Arguments.createMap();
-    WritableArray facesArray = Arguments.createArray();
-
-    for(Face face : faces) {
-      WritableMap encodedFace = FaceDetectorUtils.serializeFace(face);
-      encodedFace.putDouble("yawAngle", (-encodedFace.getDouble("yawAngle") + 360) % 360);
-      encodedFace.putDouble("rollAngle", (-encodedFace.getDouble("rollAngle") + 360) % 360);
-      facesArray.pushMap(encodedFace);
-    }
-
-    result.putArray("faces", facesArray);
-
-    WritableMap image = Arguments.createMap();
-    image.putInt("width", mWidth);
-    image.putInt("height", mHeight);
-    image.putInt("orientation", mOrientation);
-    image.putString("uri", mUri);
-    result.putMap("image", image);
-
-    mRNFaceDetector.release();
-    mPromise.resolve(result);
-  }
-
-  private static RNFaceDetector detectorForOptions(ReadableMap options, Context context) {
-    RNFaceDetector detector = new RNFaceDetector(context);
-    detector.setTracking(false);
-
-    if(options.hasKey(MODE_OPTION_KEY)) {
-      detector.setMode(options.getInt(MODE_OPTION_KEY));
-    }
-
-    if(options.hasKey(RUN_CLASSIFICATIONS_OPTION_KEY)) {
-      detector.setClassificationType(options.getInt(RUN_CLASSIFICATIONS_OPTION_KEY));
-    }
-
-    if(options.hasKey(DETECT_LANDMARKS_OPTION_KEY)) {
-      detector.setLandmarkType(options.getInt(DETECT_LANDMARKS_OPTION_KEY));
-    }
-
-    return detector;
-  }
-}
diff --git a/node_modules/react-native-camera/src/RNCamera.js b/node_modules/react-native-camera/src/RNCamera.js
index b7a271a..2df81f6 100644
--- a/node_modules/react-native-camera/src/RNCamera.js
+++ b/node_modules/react-native-camera/src/RNCamera.js
@@ -5,7 +5,6 @@ import {
   findNodeHandle,
   Platform,
   NativeModules,
-  ViewPropTypes,
   requireNativeComponent,
   View,
   ActivityIndicator,
@@ -394,7 +393,6 @@ export default class Camera extends React.Component<PropsType, StateType> {
   };
 
   static propTypes = {
-    ...ViewPropTypes,
     zoom: PropTypes.number,
     useNativeZoom: PropTypes.bool,
     maxZoom: PropTypes.number,
